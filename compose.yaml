services:
  kafka:
    image: confluentinc/confluent-local:7.4.3
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "9101:9101"
    restart: unless-stopped
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      CLUSTER_ID: 'K0EA9p0yEe6MkAAAAkKsEg'

  kafka-init-topics:
    image: confluentinc/confluent-local:7.4.3
    container_name: kafka-init-topics
    depends_on:
      - kafka
    command: >
      bash -c '
        kafka-topics --create --topic telemetry.sensors.v1
                     --partitions 1 --replication-factor 1 --if-not-exists
                     --bootstrap-server kafka:29092 &&
        kafka-topics --create --topic telemetry.snapshots.v1
                     --partitions 1 --replication-factor 1 --if-not-exists
                     --bootstrap-server kafka:29092 &&
        kafka-topics --create --topic telemetry.hubs.v1
                     --partitions 1 --replication-factor 1 --if-not-exists
                     --bootstrap-server kafka:29092
      '
    init: true

  warehouse-db:
    image: postgres:16.1
    container_name: warehouse-db
    ports:
      - "8432:5432"
    environment:
      POSTGRES_USER: warehouse
      POSTGRES_PASSWORD: warehouse
      POSTGRES_DB: warehouse
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U warehouse -d warehouse" ]
      interval: 5s
      timeout: 5s
      retries: 10


  analyzer-db:
    image: postgres:16.1
    container_name: analyzer-db
    restart: always
    environment:
      POSTGRES_DB: analyzer
      POSTGRES_USER: analyzer
      POSTGRES_PASSWORD: analyzer
    ports:
      - "5439:5432"


  store-db:
    image: postgres:16.1
    container_name: postgres-store
    ports:
      - "6432:5432"
    environment:
      POSTGRES_USER: store
      POSTGRES_PASSWORD: store
      POSTGRES_DB: store
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U store -d store" ]
      interval: 5s
      timeout: 5s
      retries: 10


  cart-db:
    image: postgres:16.1
    container_name: postgres-cart
    ports:
      - "7432:5432"
    environment:
      POSTGRES_USER: cart
      POSTGRES_PASSWORD: cart
      POSTGRES_DB: cart
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U cart -d cart" ]
      interval: 5s
      timeout: 5s
      retries: 10




