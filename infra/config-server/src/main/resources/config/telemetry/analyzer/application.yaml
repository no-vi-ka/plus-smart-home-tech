analyzer:
  kafka:
    config:
      bootstrap-servers: "localhost:9092"

      hub-consumer:
        group-id: "hub-analyzer-group"
        client-id: "hub-consumer-1"
        key-deserializer: "org.apache.kafka.common.serialization.StringDeserializer"
        value-deserializer: "ru.practicum.avro.HubEventDeserializer"
        attempt-timeout: 1000

      snapshot-consumer:
        group-id: "snapshot-analyzer-group"
        client-id: "snapshot-consumer-1"
        key-deserializer: "org.apache.kafka.common.serialization.StringDeserializer"
        value-deserializer: "ru.practicum.avro.SensorSnapshotDeserializer"
        attempt-timeout: 1000

      hub-events-topic: "telemetry.hubs.v1"
      sensor-snapshots-topic: "telemetry.snapshots.v1"

spring:
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        format_sql: true
  sql:
    init:
      mode: always
  output:
    ansi:
      enabled: ALWAYS
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/analyzer
    username: analyzer
    password: analyzer

logging:
  level:
    "org.springframework.orm.jpa": INFO
    "org.springframework.transaction": INFO
    "org.springframework.transaction.interceptor": TRACE
    "org.springframework.orm.jpa.JpaTransactionManager": DEBUG
    "org.hibernate.SQL": DEBUG
    "org.hibernate.orm.jdbc.bind": trace

grpc:
  client.hub-router:
    address: "static://localhost:59090"
    enableKeepAlive: true
    keepAliveWithoutCalls: true
    negotiationType: "plaintext"